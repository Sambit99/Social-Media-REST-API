services:
  app1:
    build: .
    container_name: node_app1
    restart: always
    ports:
      - '3001:3000'
    env_file:
      - ./.env.development
    environment:
      - PORT=3001
    depends_on:
      - redis
      - mongodb
    networks:
      - backend
    volumes:
      - .:/app
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3001/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  app2:
    build: .
    container_name: node_app2
    restart: always
    ports:
      - '3002:3000'
    env_file:
      - ./.env.development
    environment:
      - PORT=3002
    depends_on:
      - redis
      - mongodb
    networks:
      - backend
    volumes:
      - .:/app
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3002/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  app3:
    build: .
    container_name: node_app3
    restart: always
    ports:
      - '3003:3000'
    env_file:
      - ./.env.development
    environment:
      - PORT=3003
    depends_on:
      - redis
      - mongodb
    networks:
      - backend
    volumes:
      - .:/app
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost:3003/api/v1/health']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  nginx:
    image: nginx:latest
    container_name: nginx_server
    restart: always
    ports:
      - '8080:80'
    networks:
      - backend
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/html:/etc/nginx/html
    healthcheck:
      test: ['CMD', 'curl', '-f', 'http://localhost']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

  redis:
    image: redis:latest
    container_name: redis
    restart: always
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 30s
      timeout: 5s
      retries: 5
      start_period: 10s

  redis-stack:
    image: redis/redis-stack:latest
    container_name: redis_stack
    ports:
      - '8001:8001'
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 5s
      retries: 3

  mongodb:
    image: mongo:latest
    container_name: mongodb
    restart: always
    ports:
      - '27017:27017'
    volumes:
      - mongo_data:/data/db
    networks:
      - backend
    healthcheck:
      test: ['CMD', 'mongosh', '--eval', "db.runCommand('ping').ok"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 10s

networks:
  backend:

volumes:
  redis_data:
  mongo_data:
